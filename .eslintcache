[{"/var/www/web-weather-app/src/index.js":"1","/var/www/web-weather-app/src/reportWebVitals.js":"2","/var/www/web-weather-app/src/App.js":"3","/var/www/web-weather-app/src/Home.js":"4","/var/www/web-weather-app/src/SignUp.js":"5","/var/www/web-weather-app/src/User.js":"6","/var/www/web-weather-app/src/TableQuery.js":"7","/var/www/web-weather-app/src/constants.js":"8","/var/www/web-weather-app/src/Csrftoken.js":"9","/var/www/web-weather-app/src/TableComp.js":"10"},{"size":500,"mtime":1609790373000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1609790373000,"results":"13","hashOfConfig":"12"},{"size":724,"mtime":1610582437000,"results":"14","hashOfConfig":"12"},{"size":4072,"mtime":1610582805000,"results":"15","hashOfConfig":"12"},{"size":5200,"mtime":1610585953000,"results":"16","hashOfConfig":"12"},{"size":14959,"mtime":1610502336000,"results":"17","hashOfConfig":"12"},{"size":3630,"mtime":1610312733000,"results":"18","hashOfConfig":"12"},{"size":457,"mtime":1610677439537,"results":"19","hashOfConfig":"12"},{"size":215,"mtime":1610147094000,"results":"20","hashOfConfig":"12"},{"size":1202,"mtime":1610065869000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2dcto",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/web-weather-app/src/index.js",[],["46","47"],"/var/www/web-weather-app/src/reportWebVitals.js",[],"/var/www/web-weather-app/src/App.js",[],"/var/www/web-weather-app/src/Home.js",["48","49"],"import { render } from '@testing-library/react';\nimport React from 'react';\nimport './Home.css';\nimport TableQuery from './TableQuery'\nimport {BACKEND_URL,SUCCESSFUL_LOGIN} from './constants'\nimport {\n    withRouter,\n    Link\n  } from \"react-router-dom\"\n\nclass Home extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    componentDidMount(){\n        document.title = \"weather-app\"\n    }\n    render(){\n        const {history} = this.props\n        return (\n            <div>\n                <ToolBar history = {history}/>\n                <TableQuery headerId = {\"header\"} tableId = {\"table-body\"} />\n                <ContactInfo/>\n            </div>\n        )\n    }\n}\n\nclass ToolBar extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {uName:'',pass:'',logedIn:false,path:\"/\",loginError:\"\"}\n        this.handleChangeUname = this.handleChangeUname.bind(this)\n        this.handleChangePass = this.handleChangePass.bind(this)\n        this.logIn = this.logIn.bind(this)\n    }\n    handleChangeUname(event){\n        this.setState({uName:event.target.value})\n    }\n    handleChangePass(event){\n        this.setState({pass:event.target.value})\n    }\n    logIn(event){\n        const req = new XMLHttpRequest()\n        const LOGINURL = `${BACKEND_URL}/LogIn?username=${this.state.uName}&password=${this.state.pass}`\n        req.open(\"GET\",LOGINURL,false) // Synchronous request\n        req.setRequestHeader(\"Content-Type\",\"text/plain\")\n        req.send(null);\n        const res = req.responseText\n        if (res === SUCCESSFUL_LOGIN){\n            this.props.history.push({pathname:\"/userPage\",state:{uname:this.state.uName}})\n            \n        }else{\n            this.setState({loginError:\"account does not exist\"})\n        }\n    }\n    render(){\n        return (\n            <nav className = \"navbar navbar-dark bg-dark\">\n                <Link to=\"/signUp\">\n                    sign up\n                </Link>\n                <span id = \"log-info\">\n                    <form>\n                        <div className=\"form-row align-items-center\">\n                            <span id=\"log-stat\">{this.state.loginError}</span>\n                            <UnameInp handleChange = {this.handleChangeUname} value = {this.state.uName}/>\n                            <PassInp handleChange = {this.handleChangePass} value = {this.state.pass}/>\n                            <RemeberMeBox/>\n                            <LogInBtn submit = {this.logIn}/>\n                        </div>\n                    </form>\n                </span>\n            </nav>\n        )\n    }\n}\n//============ small components===========\n\nfunction RemeberMeBox(props){\n    return (\n        <div className=\"col-auto\">\n            <div className=\"form-check mb-2\">\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"autoSizingCheck\"/>\n                <label className=\"form-check-label white\" for=\"autoSizingCheck\">\n                    Remember me\n                </label>\n            </div>\n        </div>\n    )\n}\nfunction ContactInfo(props){\n    return (\n        <p class = \"center\" id=\"contact-info\">\n            Ivan Penales<br/>\n            ipenales@ualberta<br/>\n            https://github.com/navibryle\n        </p>\n    )\n}\nfunction LogInBtn(props){\n    return (\n        <div className=\"col-auto\">\n            \n            <button type=\"button\" className=\"btn btn-primary mb-2\" onClick={props.submit}>Log in</button>\n        </div>\n    )\n}\nfunction UnameInp(props){\n    return (\n        <div className=\"col-auto\">\n            <input type=\"text\" className=\"form-control mb-2\" id=\"log-username\" value={props.value} onChange={props.handleChange} placeholder=\"Username\"/>\n        </div>\n    )\n}\n\nfunction PassInp(props){\n    return (\n        <div className=\"col-auto\">\n            <input type=\"password\" className=\"form-control mb-2\" id=\"log-password\" value={props.value} onChange={props.handleChange} placeholder=\"Password\"/>\n        </div>\n    )\n}\n//========== small components end===========\n\nexport default withRouter(Home)","/var/www/web-weather-app/src/SignUp.js",["50"],"import React from 'react'\nimport './signUp.css'\nimport {\n    Link\n  } from \"react-router-dom\"\nimport {BACKEND_URL,ACCOUNT_CREATED,ACCOUNT_EXSIST} from './constants'\nimport cookie from 'react-cookies'\nimport CsrfToken from './Csrftoken'\nexport default class SignUp extends React.Component{  \n    constructor(props){\n        super(props)\n        this.state = {uname:'',pass:'',passConf:'',dbResult:'',inpStatus:null}\n        this.unameListener = this.unameListener.bind(this)\n        this.passListener = this.passListener.bind(this)\n        this.passConfListener = this.passConfListener.bind(this)\n        this.signUp = this.signUp.bind(this)\n        this.checkInp = this.checkInp.bind(this)\n    }\n    unameListener(event){\n        this.setState({uname:event.target.value},() => this.checkInp())\n    }\n    passListener(event){\n        this.setState({pass:event.target.value},() => this.checkInp())\n    }\n    passConfListener(event){\n        this.setState({passConf:event.target.value},() => this.checkInp())\n    }\n    signUp(event){\n        //need to create an acount that doesnt already exist\n        this.checkInp()\n        if (this.state.inpStatus === ''){\n            console.log(\"hereeeeeeee\")\n            const req = new XMLHttpRequest()\n            const url = `${BACKEND_URL}/createUser?username=${this.state.uname}&password=${this.state.pass}`\n            req.open('POST',url,false)//synchronous request\n            req.setRequestHeader(\"Content-type\", \"text/html\")\n            req.setRequestHeader(\"X-CSRFTOKEN\",cookie.load(\"csrftoken\"))//set the token that django will recognize\n            req.withCredentials = true\n            req.send(`username=${this.state.uname}&password=${this.state.pass}`)\n            const res = req.responseText\n            if (res === ACCOUNT_CREATED){\n                // this will use useHistory api from react router to change the page\n                const {history} = this.props\n                history.push({pathname:\"/userPage\",state: {uname:this.state.uname}})\n            }else if (res === ACCOUNT_EXSIST){\n                this.setState({inpStatus:\"username already exist\"})\n            }else{\n                this.setState({inpStatus:\"error\"})\n            }\n        }\n        \n    }\n    checkInp(){\n        if (this.state.uname === '' ){\n            this.setState({inpStatus:'username must not be empty'})\n        }else if (this.state.pass === ''){\n            this.setState({inpStatus:'password must not be empty'})\n        }else if (this.state.passConf === ''){\n            this.setState({inpStatus:'password confirmation must not be empty'})\n        }else if (this.state.uname.length > 50 || this.state.pass.length > 50 || this.state.passConf.length > 50){\n            this.setState({inpStatus:'username,password, and passowrd confirmation must be less than or equal to 50 characters'})\n        }else if(this.state.passConf !== this.state.pass){\n            this.setState({inpStatus:'password must match'})\n        }else{\n            this.setState({inpStatus:''})\n        }\n    }\n    render(){\n        return(\n            <div>\n                <Nav/>\n                <form className = \"sign-up-form\" >\n                    <CsrfToken/>\n                    <WarningText uname = {this.state.uname} \n                    pass = {this.state.pass} \n                    passConf = {this.state.passConf} \n                    dbResult = {this.state.dbResult}\n                    inpStatus = {this.state.inpStatus}/>\n                    <UnameInp value = {this.state.uname} handleChange= {this.unameListener}/>\n                    <PassInp value = {this.state.pass} handleChange = {this.passListener}/>\n                    <PassConf value = {this.state.passConf} handleChange = {this.passConfListener}/>\n                    <SingUpBtn handleClick = {this.signUp}/>\n                </form>\n            </div>\n        )\n    }\n}\nclass WarningText extends React.Component{\n    constructor(props){\n        super(props)\n    }\n    render(){\n        return(\n        <div id = \"warning-text\">{this.props.inpStatus}</div>\n        )\n    }\n}\nfunction Nav(props){\n    return(\n        <nav class=\"navbar navbar-dark bg-dark\">\n            <Link to=\"/\">\n                Home\n            </Link>\n        </nav>\n    )\n    \n}\nfunction UnameInp(props){\n    return (\n        <div className=\"mx-sm-3 mb-2\">\n            <input type=\"username\" className=\"form-control\" id=\"username\" placeholder=\"Username\" onChange = {props.handleChange} value={props.value}/>\n        </div>\n    )\n}\n\nfunction PassInp(props){\n    return(\n        <div className=\"mx-sm-3 mb-2\">\n            <input type=\"password\" className=\"form-control\" id=\"password\" placeholder=\"Password\" value={props.value} onChange = {props.handleChange}/>\n        </div>\n    )\n}\n\nfunction PassConf(props){\n    return(\n        <div class=\"mx-sm-3 mb-2\">\n            <input type=\"password\" class=\"form-control\" id=\"confirmed-password\" placeholder=\"Confirm Password\" value={props.value} onChange = {props.handleChange}/>\n        </div>\n    )\n}\nfunction SingUpBtn(props){\n    return(\n        <button onClick={props.handleClick} type=\"button\" class=\"btn btn-primary mb-2 button-sign-up\">\n            Sign up\n        </button>\n    )\n}\n\n","/var/www/web-weather-app/src/User.js",["51","52"],"import React from 'react'\nimport './User.css'\nimport {ADD_TABLES,SHOW_BUTTONS,BACKEND_URL,STORED_DATASET,SUCCESSFULY_SAVED,SUCCESSFULY_DELETED} from './constants'\nimport {v4 as uuidv4} from 'uuid'\nimport {TableHeader,TableRow} from './TableComp'\nimport CsrfToken from './Csrftoken'\nimport cookie from 'react-cookies'\nimport { Link } from 'react-router-dom'\nexport default class User extends React.Component{\n    //on mount this component needs to query the database for all the datasets in the user data and create a list of buttons\n    constructor(props){\n        super(props)\n        //newButtons will be true if new buttons for adding and showing a table needs to be rendered\n        this.state = {selectedDataSet:'',dataset:[],button:null,newDataset:'',uName:this.props.location.state.uname}\n        this.addDataSet = this.addDataSet.bind(this)\n        this.dataSetListner = this.dataSetListner.bind(this)\n        this.getDatasets = this.getDatasets.bind(this)\n    }\n    dataSetListner(event){\n        this.setState({newDataset:event.target.value})\n    }\n    componentDidMount(){\n        this.getDatasets()\n        this.checkForCookies()\n    }\n    checkForCookies(){\n        \n        var cookieEnabled = (navigator.cookieEnabled) ? true : false;\n\n        if (typeof navigator.cookieEnabled == \"undefined\" && !cookieEnabled){ \n            document.cookie=\"testcookie\";\n            cookieEnabled = (document.cookie.indexOf(\"testcookie\") != -1) ? true : false;\n        }\n        console.log(cookieEnabled)\n        if (!cookieEnabled){\n            alert(\"cookie not enabled\")\n        }\n    }\n    addDataSet(event){\n        const req = new XMLHttpRequest()\n        const url = `${BACKEND_URL}/storeDataset?username=${this.state.uName}&dataset=${this.state.newDataset}`\n        req.open(\"GET\",url,false)\n        req.setRequestHeader(\"Content-Type\",\"text/plain\")\n        req.send(null)\n        const response = req.responseText\n        if (response === STORED_DATASET){\n            //DATASET successfuly stored\n            var newDataSetList = [...this.state.dataset]\n            newDataSetList.push({dName:this.state.newDataset,id:uuidv4()})\n            this.setState({dataset:newDataSetList,newDataset:''})\n        }\n    }\n   \n    getDatasets(){\n        const req = new XMLHttpRequest()\n        const url = `${BACKEND_URL}/getDatasets?username=${this.state.uName}`\n        req.open('GET',url,false)\n        req.send(null)\n        const res = JSON.parse(req.response) // the response will a JSON:{'datasetName':'datasetName',...,'datasetName':'datasetName'}\n        const newDataset = this.state.dataset.slice()\n        for (var i in res){\n            //res[i] will be the name of the dataset\n            if (res[i] != null){\n                newDataset.push({id:`id-${res[i]}`,dName:res[i]})\n            }\n        }\n        this.setState({dataset:newDataset})\n        \n    }\n    render(){\n        return(\n            <div>\n                <CsrfToken/>\n                <Nav/>\n                <UserData \n                dataset = {this.state.dataset} \n                newDataset = {this.state.newDataset} \n                dataSetListner = {this.dataSetListner}\n                addDataSet = {this.addDataSet}\n                button = {this.state.button} \n                uName={this.state.uName}/>\n            </div>\n        )\n    }\n}\nclass UserData extends React.Component{\n    constructor(props){\n        super(props)\n        this.request = null\n        this.state = {cities:[],newRows:[],newRowInp:'',currentDname:null,buttonDisp:''}\n        /**\n         * citites is the list of entries in the dataset\n         * newRows are the newRows that are entered by the user\n         * newRowInp is the new city name the the user want to enter in the datbase\n         * currentDname is the current selected dataset\n         * buttonDisp is the display mode for the button option\n         */\n        this.showButtons = this.showButtons.bind(this)\n        this.showTables = this.showTables.bind(this)\n        this.addTables = this.addTables.bind(this)\n        this.fetch_city = this.fetch_city.bind(this)\n        this.newRowListener = this.newRowListener.bind(this)\n        this.clearNewRowsCallback = this.clearNewRowsCallback.bind(this)\n        this.saveToDb = this.saveToDb.bind(this)\n        this.deleteTables = this.deleteTables.bind(this)\n        this.deleteCallback = this.deleteCallback.bind(this)\n    }\n    showTables(){\n        //-------this will get tables from db-----\n        const req = new XMLHttpRequest()\n        const url = `${BACKEND_URL}/getTable?username=${this.props.uName}&dataset=${this.state.currentDname}`\n        req.open('GET',url,false)\n        req.setRequestHeader('Content-Type','application/json')\n        req.send(null)\n        //--------------------------------------------\n        this.setState({cities:this.parseData(req.response)})//this will cause the dom to update with the new tables\n    }\n    parseData(Data){\n        //this will turn the json into a javascript object. This will be subjective to what the server produces\n        var output = []\n        var parsedData = JSON.parse(Data)\n        for (var key in JSON.parse(Data)){\n            var buffer = {}\n            buffer.name = key\n            buffer.temp = parsedData[key].temp\n            buffer.feels_like = parsedData[key].feels_like\n            buffer.temp_min = parsedData[key].temp_min\n            buffer.temp_max = parsedData[key].temp_max\n            buffer.pressure = parsedData[key].pressure\n            buffer.humidity = parsedData[key].humidity\n            buffer.visibility = parsedData[key].visibility\n            buffer.iconUrl = parsedData[key].iconUrl\n            buffer.description = parsedData[key].description\n            output.push(buffer)\n        }\n        return output\n    }\n    parseDataForDb(Data){\n        //Data must be the javascript object for each row of a table\n        var output = {}\n        for (var key in Data){\n            output[Data[key].name] = Data[key]\n        }\n        return output\n    }\n    newRowListener(event){\n        this.setState({newRowInp:event.target.value})\n    }\n    addTables(){\n        this.setState({cities:[]})\n        this.setState({buttonDisp:ADD_TABLES})\n    }\n    fetch_city(event){\n        let instance = this\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\"+this.state.newRowInp+\"&appid=249e80fba61f245e94d010e0f9955e10&units=metric\").then(\n        function (response){\n            return response.json()\n            }).then(function (data){\n                if (data != null && data.main != null){\n                    const weatherAtt = {\n                        name:data.name,\n                        temp:data.main.temp,\n                        feels_like:data.main.feels_like,\n                        temp_min:data.main.temp_min,\n                        temp_max:data.main.temp_max,\n                        pressure:data.main.pressure,\n                        humidity:data.main.humidity,\n                        visibility:data.visibility,\n                        iconUrl:`http://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n                        description:data.weather[0].description\n                    }\n                    const arr = [...instance.state.newRows]\n                    arr.push(weatherAtt)\n                    instance.setState({newRows:arr})\n                }else{\n                    alert(\"City is not in the OpenWeather API. \")\n                }\n        }).catch(function (err){\n            alert(\"City is not in the OpenWeather API. Error log: \"+err)\n        })\n    }\n    showButtons(event){\n        const id = event.target.id\n        for (var i in this.props.dataset){\n            if (i != null && this.props.dataset[i].id === id){\n                this.setState({\n                    buttonDisp:SHOW_BUTTONS,\n                    currentDname:this.props.dataset[i].dName\n                },() => this.showTables())\n            }\n        }\n    }\n    createDatasetButtons(){\n        return (\n            this.props.dataset.map((item) =>{\n                return(\n                    <DatasetButton id = {item.id} showButtons = {this.showButtons} dName = {item.dName} key = {uuidv4()}/>\n                )\n                \n            })\n        )\n    }\n    clearNewRowsCallback(){\n        if (this.req.responseText != SUCCESSFULY_SAVED){\n            alert(\"could not save city!\")\n        }\n        this.setState({newRows:[],buttonDisp:SHOW_BUTTONS},() => this.showTables())\n    }\n    saveToDb(){\n        const req = new XMLHttpRequest();\n        const url = `${BACKEND_URL}/saveCities?username=${this.props.uName}&dataset=${this.state.currentDname}`\n        console.log(url)\n        req.open('POST',url,true)\n        req.withCredentials = true\n        req.setRequestHeader(\"X-CSRFTOKEN\",cookie.load(\"csrftoken\"))//set the token that django will recognize\n        req.send(JSON.stringify(this.parseDataForDb(this.state.newRows)))\n        this.req = req\n        req.onload = this.clearNewRowsCallback\n    }\n    deleteCallback(){\n        if (this.req.responseText !== SUCCESSFULY_DELETED){\n            alert(`could not delete cities in ${this.state.currentDname}`)\n        }\n        this.showTables()\n    }\n    deleteTables(){\n        const req = new XMLHttpRequest();\n        const url = `${BACKEND_URL}/deleteCities?username=${this.props.uName}&dataset=${this.state.currentDname}`\n        req.open('POST',url,true)\n        req.withCredentials = true\n        req.setRequestHeader(\"X-CSRFTOKEN\",cookie.load(\"csrftoken\"))//set the token that django will recognize\n        this.req = req\n        req.send(null)\n        req.onload = this.deleteCallback\n    }\n    render(){\n        return (\n            <div>\n                <span id = \"data-wrap\" >\n                    <div  id = \"dataset\" className=\"list-group\">\n                        {this.createDatasetButtons()}\n                    </div>\n                    <AddDataSet \n                    handleClick={this.props.addDataSet} \n                    dName = {this.state.currentDname} \n                    handleChange = {this.props.dataSetListner} \n                    value = {this.props.newDataset}/>\n                    <CsrfToken/>\n                    <ButtonOption \n                    buttonDisp = {this.state.buttonDisp} \n                    dName = {this.state.currentDname} \n                    newRowVal= {this.state.newRowInp}\n                    deleteTables = {this.deleteTables}\n                    handleChange={this.newRowListener} \n                    addTables={this.addTables} \n                    addTable={this.fetch_city}\n                    showTables={this.showTables}\n                    /> \n                </span>\n                <UserTable \n                cities={this.state.cities} \n                toAdd={this.state.newRows} \n                tableId = {\"table-body-user\"} \n                headerId = {\"header\"}\n                saveTables = {this.saveToDb}/>\n            </div>\n            )\n    }\n}\nfunction DatasetButton(props){\n    //prev class : list-group-item list-group-item-action\n    return (\n        <button id = {props.id} onClick = {props.showButtons} type=\"button\" className=\" list-group-item list-group-item-action\">{props.dName}</button>\n    )\n}\nclass UserTable extends React.Component{\n    constructor(props){\n        super(props)\n        this.tableHeader = <TableHeader headerId = {this.props.headerId}/>\n        this.toRender = null\n    }\n    render(){\n        if (this.props.cities.length > 0){\n            return (\n                <table class = \"center user-table\" id = \"table\">\n                    <tbody id = {this.props.tableId}>\n                        {this.tableHeader}\n                        {this.props.cities.map((data) => {\n                            return <TableRow att={data} key = {uuidv4()} />\n                        })}\n                    </tbody>\n                </table>\n            )\n        }else if (this.props.toAdd.length > 0){\n            return (\n                <div>\n                    <table class = \"center user-table\" id = \"table\">\n                        <tbody id = {this.props.tableId}>\n                            {this.tableHeader}\n                            {this.props.toAdd.map((data) => {\n                                return <TableRow att={data} key = {uuidv4()} />\n                            })}\n                        </tbody>\n                    </table>\n                    <CsrfToken/>\n                    <button onClick = {this.props.saveTables} id = \"save-button\" type = \"button\" className=\"btn btn-dark save-btn\">\n                        save\n                    </button>\n                </div>\n                \n            )\n        }\n        return null\n    }\n}\n\nclass ButtonOption extends React.Component{\n    constructor(props){\n        super(props)\n        this.button = null\n        this.state = {button:'',buttonDisp:this.props.buttonDisp}\n    }\n    render(){\n        let button = null\n        if (this.props.buttonDisp === SHOW_BUTTONS){\n            button =  (\n                <div >\n                        <button  onClick = {this.props.addTables}  className=\"btn btn-dark btn-opt-child-margin\">Add city to {this.props.dName}</button>\n                        <button onClick = {this.props.deleteTables} className=\"btn btn-dark btn-opt-child-margin\">Delete ALL tables of {this.props.dName}</button>\n                </div>\n            )\n        }else if (this.props.buttonDisp === ADD_TABLES){\n         button = (\n                <div className = \"center user-city-inp-wrapper\" >\n                    \n                    <input  id = \"input-box-user\"  placeholder=\"Enter city to add\" value={this.props.newRowVal} onChange={this.props.handleChange}/>\n                    <button onClick={this.props.addTable}  type = \"button\" className=\"submit-button-user btn btn-dark\">submit</button>\n                </div>\n         )\n        }\n        return (\n            <div id = \"button-opt\" className = \"center button-opt-options\">\n                <CsrfToken/>\n                {button}\n            </div>\n        )\n    }\n}\n\nfunction Nav(props){\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <span  className = \"white\" id=\"user-disp\" value = {props.error}></span>\n            <Link to = \"/\">\n                <button  className=\"btn btn-primary mb-2 white\" id=\"user-disp\">sign out</button>\n            </Link>\n            \n        </nav>\n    )\n}\nfunction AddDataSet(props){\n    return(\n        <div id = \"add-dataset\" className = \"center\">\n            <div className = \"bold margin center\">Add dataset</div>\n            <div>\n                <CsrfToken/>\n                <input type=\"text\"  id = \"data-name-inp\" value={props.value} onChange={props.handleChange}/>\n            </div>\n            <div className=\"center\"><button onClick={props.handleClick} type=\"button\" className=\"btn btn-primary btn-add-dataset\">Submit</button></div>\n        </div>\n    )\n}\n\n","/var/www/web-weather-app/src/TableQuery.js",[],"/var/www/web-weather-app/src/constants.js",[],"/var/www/web-weather-app/src/Csrftoken.js",[],"/var/www/web-weather-app/src/TableComp.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":10,"nodeType":"59","messageId":"60","endLine":1,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":12,"column":5,"nodeType":"63","messageId":"64","endLine":14,"endColumn":6},{"ruleId":"61","severity":1,"message":"62","line":89,"column":5,"nodeType":"63","messageId":"64","endLine":91,"endColumn":6},{"ruleId":"65","severity":1,"message":"66","line":32,"column":68,"nodeType":"67","messageId":"68","endLine":32,"endColumn":70},{"ruleId":"65","severity":1,"message":"66","line":204,"column":35,"nodeType":"67","messageId":"68","endLine":204,"endColumn":37},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]